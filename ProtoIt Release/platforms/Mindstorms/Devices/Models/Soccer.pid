// Copyright (C) 2018 D. Kruithof
//
// GNU General Public License Usage
// --------------------------------
// This file may be used under the terms of the GNU General Public
// License version 3.0 as published by the Free Software Foundation
// and appearing in the file 'GNU-GPL.txt' included in the packaging
// of this file.  Please review the following information to ensure
// the GNU General Public License version 3.0 requirements will be
// met: http://www.gnu.org/copyleft/gpl.html.

<PLATFORM>
	MINDSTORMS
<AUTHOR>
	ProtoIt
<YEAR>
	2018

<DEVICE>
	ACTUATOR, Voet
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Voet
<ICON>
	voet.png
<SIGNALIN>
	START, Schop wanneer?
<CONSTANT>
	SET_NOW, Direct, 1
<PRIVATE>
	READY, Klaar
<STEPINIT>
	SetInteger( START, 0);
	SetInteger( READY, 0);
<ACTUATORUPDATE>
	if ( START.num && !READY.num ) {
		OnFwd( OUT_A, 200);
		Wait( 200);
		OnRev( OUT_A, 200);
		Wait( 220);
		Off( OUT_A);
		SetInteger( READY, 1);
	}
<END>

<DEVICE>
	SENSOR, Kompas
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Kompas
<ICON>
	htkompas.png
<SIGNALOUT>
	AZIM, Azimut (°)
	CARD, Windroos
	ISGOAL, Heen, #P
	ISBACK, Terug
<CONSTANT>
	GOAL, Speelrichting
	CARD_N, Noord, 0, #P
	CARD_NE, Noordoost, 45
	CARD_E, Oost, 90
	CARD_SE, Zuidoost, 135
	CARD_S, Zuid, 180
	CARD_SW, Zuidwest, 225
	CARD_W, West, 270
	CARD_NW, Noordwest, 315
<ROUTINE>
#ifndef ENHANCED
int Compass( const byte  port)
{
	byte cmdBuf[] = {0x02, 0x42};
	byte respBuf[];
	int	 cResp = 2;
	LowspeedWrite( port, cResp, cmdBuf);
	cResp = LowspeedBytesReady( port);
	if ( cResp > 0 ) {
		cResp = LowspeedRead( port, cResp, respBuf);
		return 2*respBuf[0] + respBuf[1];
	}
	return -1;
}
#endif
int Direction( const int azim)
{
	if ( azim < 5 || azim > 354 ) return 0;
	return (azim + 5) / 10 * 10;
}
int Cardinal( const int azim)
{
	if ( azim < 23 || azim > 337 ) return CARD_N.num;
	else if ( azim < 68 ) return CARD_NE.num;
	else if ( azim < 113 ) return CARD_E.num;
	else if ( azim < 158 ) return CARD_SE.num;
	else if ( azim < 203 ) return CARD_S.num;
	else if ( azim < 248 ) return CARD_SW.num;
	else if ( azim < 293 ) return CARD_W.num;
	else if ( azim < 338 ) return CARD_NW.num;
	return -1;
}
<SETUP>
	SetSensorLowspeed( S1);
#ifdef ENHANCED
		int goal = SensorHTCompass( S1) + 180;
#else
		int goal = Compass( S1) + 180;
#endif
	if ( goal >= 360 ) goal -= 360;
	SetInteger( GOAL, Direction( goal));
<SENSORUPDATE>
#ifdef ENHANCED
	int azim = SensorHTCompass( S1);
#else
	int azim = Compass( S1);
#endif
	SetInteger( AZIM, azim);
	SetInteger( CARD, Cardinal( azim));
	SetInteger( ISGOAL, 0);
	SetInteger( ISBACK, 0);
	if ( Direction( azim) == GOAL.num )
		SetInteger( ISGOAL, 1);
	else {
		if ( azim > 180 ) azim -= 180;
		else azim += 180;
		if ( Direction( azim) == GOAL.num )
			SetInteger( ISBACK, 1);
	}
<END>

<DEVICE>
	SENSOR, IRsensor
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Balsensor
<ICON>
	htinfrarood.png
<SIGNALOUT>
	INFRONT, Bal voor, #P WELKE KANT
	ATLEFT, Bal links
	ATRIGHT, Bal rechts
	INBACK, Bal achter
	IS30, Hoek 30°, #P WELKE HOEK
	IS60, Hoek 60°
	IS90, Hoek 90°
	IS120, Hoek 120°
	ANGLE, Hoek (°), #P WAARDES
	STRENGTH, Sterkte (%)
<CALIBRATE>
	MINSTRENGTH, Min. sterkte (%), 30
<GLOBAL>
int direction;
<ROUTINE>
void IRSeekerV2(const byte  port, int &dir, int &strength)
{
  // code comes from the HiTechnic download page
  int cResp;
  byte cmdBuf[] = {0x10, 0x43};  // Read DC signal strengths (skip the dir)
  byte respBuf[];                 // Response Buffer
  bool fSuccess;
  int i, iMax;
  long dcSigSum, dcStr;

  dir = 0;
  strength = 0;

  // Read DC mode
  cResp=6;
  fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
  if (fSuccess) {
    // Find the max DC sig strength
    iMax = 0;
    for (i=1; i<5; i++) if (respBuf[i] > respBuf[iMax]) iMax = i;
    // Calc base DC direction value
    dir = iMax*2+1;
    // Set base dcStrength based on max signal and average
    dcSigSum = respBuf[iMax] + respBuf[5];
    // Check signal strength of neighboring sensor elements
    if ((iMax > 0) && (respBuf[iMax-1] > respBuf[iMax]/2)) {
        dir--;
        dcSigSum += respBuf[iMax-1];
    }
    if ((iMax < 4) && (respBuf[iMax+1] > respBuf[iMax]/2)) {
        dir++;
        dcSigSum += respBuf[iMax+1];
    }
    // Make DC strength compatible with AC strength. use: sqrt(dcSigSum*500)
    dcSigSum *= 500; dcStr = 1;
    repeat(10) dcStr = (dcSigSum/dcStr + dcStr) / 2;  // sqrt approx
    strength = dcStr;
    // Decide if using DC strength or should read and use AC strength
    if (strength <= 200) {
      // Use AC Dir
      dir = 0; strength = 0;
      cmdBuf[1] = 0x49; // Recycle rest of cmdBuf from the DC read operation
      cResp=6;
      fSuccess = I2CBytes(port, cmdBuf, cResp, respBuf);
      if (fSuccess) {
        dir = respBuf[0];
        // Sum the sensor elements to get strength
        if (dir > 0) for (i=1; i<=5; i++) strength += respBuf[i];
      }
    }
  }
  strength = strength * 100 / 352;
}
<SETUP>
	SetSensorLowspeed( S3);
<SENSORUPDATE>
	IRSeekerV2( S3, direction, STRENGTH.num);
	SetInteger( ANGLE, 180);
	SetInteger( INFRONT, 0);
	SetInteger( ATLEFT, 0);
	SetInteger( ATRIGHT, 0);
	SetInteger( IS30, 0);
	SetInteger( IS60, 0);
	SetInteger( IS90, 0);
	SetInteger( IS120, 0);
	if ( STRENGTH.num > MINSTRENGTH.num ) {
		switch ( direction) {
			case 1 :	SetInteger( IS120, 1);
						SetInteger( ANGLE, 120);
						SetInteger( ATRIGHT, 1);
						break;
			case 2 :	SetInteger( IS90, 1);
						SetInteger( ANGLE, 90);
						SetInteger( ATRIGHT, 1);
						break;
			case 3 :	SetInteger( IS60, 1);
						SetInteger( ANGLE, 60);
						SetInteger( ATRIGHT, 1);
						break;
			case 4 :	SetInteger( IS30, 1);
						SetInteger( ANGLE, 30);
						SetInteger( ATRIGHT, 1);
						break;
			case 5 :	SetInteger( ANGLE, 0);
						SetInteger( INFRONT, 1);
						break;
			case 6 :	SetInteger( IS30, 1);
						SetInteger( ANGLE, 30);
						SetInteger( ATLEFT, 1);
						break;
			case 7 :	SetInteger( IS60, 1);
						SetInteger( ANGLE, 60);
						SetInteger( ATLEFT, 1);
						break;
			case 8 :	SetInteger( IS90, 1);
						SetInteger( ANGLE, 90);
						SetInteger( ATLEFT, 1);
						break;
			case 9 :	SetInteger( IS120, 1);
						SetInteger( ANGLE, 120);
						SetInteger( ATLEFT, 1);
						break;
		}
	}
<END>

<DEVICE>
	SENSOR, Lichtsensor
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Licht
<ICON>
	lichtsensor.png
<CALIBRATE>
	WHITETONE, Wit(%), 67
	BLACKTONE, Zwart (%), 33
<SIGNALOUT>
	LIGHT, Lichtsterkte (%), 0
	ISBLACK, Op zwart, 0, #P
	ISGRAY, Op grijs, 0
	ISWHITE, Op wit, 0
	ISB2W, Zwart naar wit, 0, #P
	ISG2W, Grijs naar wit, 0
	ISB2G, Zwart naar grijs, 0
	ISW2G, Wit naar grijs, 0
	ISG2B, Grijs naar zwart, 0
	ISW2B, Wit naar zwart, 0
<PRIVATE>
	PREVCOLOR, Vorige
<ROUTINE>
void MoveColor( int current)
{
	if ( current != PREVCOLOR.num )
	{
		SetInteger( ISB2W, 0);
		SetInteger( ISG2W, 0);
		SetInteger( ISB2G, 0);
		SetInteger( ISW2G, 0);
		SetInteger( ISG2B, 0);
		SetInteger( ISW2B, 0);
		switch ( current ) {
			case 0 :	if ( PREVCOLOR.num == 1 ) { SetInteger( ISG2B, 1); }
						else { SetInteger( ISW2B, 1); }
						break;
			case 1 :	if ( PREVCOLOR.num ) { SetInteger( ISW2G, 1); }
						else { SetInteger( ISB2G, 1); }
						break;
			case 2 :	if ( PREVCOLOR.num ) { SetInteger( ISG2W, 1); }
						else { SetInteger( ISB2W, 1); }
						break;
		}
		SetInteger( PREVCOLOR, current);
	}
}
<SETUP>
	SetSensorLight( S2);
	SetInteger( PREVCOLOR, 0);
<SENSORUPDATE>
	SetInteger( LIGHT, Sensor( S2));
	if ( LIGHT.num < BLACKTONE.num ) {
		SetInteger( ISBLACK, 1);
		SetInteger( ISGRAY, 0);
		SetInteger( ISWHITE, 0);
		MoveColor( 0);
	}
	else
	if ( LIGHT.num > WHITETONE.num ) {
		SetInteger( ISBLACK, 0);
		SetInteger( ISGRAY, 0);
		SetInteger( ISWHITE, 1);
		MoveColor( 2);
	}
	else {
		SetInteger( ISBLACK, 0);
		SetInteger( ISGRAY, 1);
		SetInteger( ISWHITE, 0);
		MoveColor( 1);
	}
<END>

<DEVICE>
	SENSOR, Ultrasone-sensor
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Afstand
<ICON>
	ultrasonesensor.png
<CALIBRATE>
	CLOSE, Dichtbij (cm), 25
	AWAY, Veraf (cm), 75
<SIGNALOUT>
	DISTANCE, Afstand (cm), 0
	ISCLOSE, Dichtbij, 0, #P
	ISNORMAL, Normaal, 0
	ISAWAY, Veraf, 0
<SETUP>
	SetSensorLowspeed( S4);
<SENSORUPDATE>
	SetInteger( DISTANCE, SensorUS( S4));
	if ( DISTANCE.num < CLOSE.num ) {
		SetInteger( ISCLOSE, 1);
		SetInteger( ISNORMAL, 0);
		SetInteger( ISAWAY, 0);
	}
	else
	if ( DISTANCE.num > AWAY.num ) {
		SetInteger( ISCLOSE, 0);
		SetInteger( ISNORMAL, 0);
		SetInteger( ISAWAY, 1);
	}
	else {
		SetInteger( ISCLOSE, 0);
		SetInteger( ISNORMAL, 1);
		SetInteger( ISAWAY, 0);
	}
<END>
