// Copyright (C) 2018 D. Kruithof
//
// GNU General Public License Usage
// --------------------------------
// This file may be used under the terms of the GNU General Public
// License version 3.0 as published by the Free Software Foundation
// and appearing in the file 'GNU-GPL.txt' included in the packaging
// of this file.  Please review the following information to ensure
// the GNU General Public License version 3.0 requirements will be
// met: http://www.gnu.org/copyleft/gpl.html.

<PLATFORM>
	RASPBERRY
<AUTHOR>
	ProtoIt
<YEAR>
	2018

<DEVICE>
	ACTUATOR, Stappenmotor
<COPYRIGHT>
	2018, ProtoIt
<ICON>
	pinout.png
<PORT>
	PIN1, In1
	PIN2, In2
	PIN3, In3
	PIN4, In4
<CALIBRATE>
	STEPS, Stappen / ronde, 512
	MINDELAY, Min. vertr. (mics), 250
<SIGNALIN>
	ANGLE, Draaihoek (°), #P Aandrijving
	COUNT, Aantal stappen, #E
	SPEED, Snelheid (%)
	DIRECTION, Richting
	START, Start wanneer?, > Direct, #P Start en stop, #E
	STOP, Stop wanneer?, > Nooit, #E
<SIGNALOUT>
	READY, Klaar, 0
<CONSTANT>
	SET_MAX, Maximum, 100, #P AANDRIJVING
	SET_OFF, Stop
	SET_FORWARD, Vooruit, 1
	SET_BACKWARD, Achteruit, 2
	SET_NOW, Direct, 1, #P START EN STOP
	SET_NEVER, Nooit, 0
<PRIVATE>
	PASS, Stapnr
	DELAY, Vertraging
	ACTIVE, Active
<ROUTINE>
void stepper( int bits, int dly)
{
	digitalWrite( (int) PIN1, bits & 8);
	delayMicroseconds( dly);
	digitalWrite( (int) PIN2, bits & 4);
	delayMicroseconds( dly);
	digitalWrite( (int) PIN3, bits & 2);
	delayMicroseconds( dly);
	digitalWrite( (int) PIN4, bits & 1);
	delayMicroseconds( dly);
}
void fullstep( int dly, bool reverse)
{
	int bits[8] = {8, 12, 4, 6, 2, 3, 1, 9};
	if ( reverse )
		for ( int i = 7; i >= 0; i-- )
			stepper( bits[i], dly);
	else
		for ( int i = 0; i < 7; i++ )
			stepper( bits[i], dly);
}
<SETUP>
	pinMode( PIN1, OUTPUT);
	pinMode( PIN2, OUTPUT);
	pinMode( PIN3, OUTPUT);
	pinMode( PIN4, OUTPUT);
<STEPINIT>
	START = 0;
	STOP = 0;
	ACTIVE = 0;
	PASS = 0;
	READY = 0;
<FUNCTIONUPDATE>
    if ( (int) START )
        ACTIVE = 1;
    if ( (int) STOP ) {
        ACTIVE = 0;
		stepper( 0, 0);
    }
	if ( (int) ANGLE )
		COUNT = (ANGLE * STEPS) / 360;
	if ( (int) SPEED > 100 ) SPEED = 100;
    if ( (int) SPEED > 0 )
      DELAY = ((long) MINDELAY * 100) / (long) SPEED;
    else
      DELAY = 0;
<ACTUATORUPDATE>
	if ( (int) ACTIVE && (PASS < COUNT) ) {
		switch ( (int) DIRECTION ) {
			case 1 : fullstep( (int) DELAY, false); PASS++; break;
			case 2 : fullstep( (int) DELAY, true); PASS++; break;
			default : stepper( 0, 0);
		}
		if ( PASS >= COUNT ) {
			READY = 1;
			stepper( 0, 0);
		}
	}
<END>
