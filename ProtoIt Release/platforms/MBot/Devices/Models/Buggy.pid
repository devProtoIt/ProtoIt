// Copyright (C) 2018 D. Kruithof
//
// GNU General Public License Usage
// --------------------------------
// This file may be used under the terms of the GNU General Public
// License version 3.0 as published by the Free Software Foundation
// and appearing in the file 'GNU-GPL.txt' included in the packaging
// of this file.  Please review the following information to ensure
// the GNU General Public License version 3.0 requirements will be
// met: http://www.gnu.org/copyleft/gpl.html.

<PLATFORM>
	MBOT
<AUTHOR>
	ProtoIt
<YEAR>
	2018

<DEVICE>
	ACTUATOR, Buggy
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Buggy
<ICON>
	buggy.png
<CALIBRATE>
	OBTUSE, Flauwe bocht (%), 10
	NORMAL, Normale bocht (%), 40
	SHARP, Scherpe bocht (%), 70
	ACUTE, Haakse bocht (%), 100
<SIGNALIN>
	DIRECTION, Richting, #P Besturing
	STEER, Stuur
	SHARPNESS, Bocht (%)
	SPEED, Snelheid (%)
	START, Start wanneer?, > Direct, #P Start en stop, #E
	STOP, Stop wanneer?, > Nooit, #E
<CONSTANT>
	SET_OFF, Stop, 0, #P RICHTING
	SET_FORWARD, Vooruit, 1
	SET_BACKWARD, Achteruit, 2
	SET_STRAIGHT, Rechtdoor, 0, #P STUUR
	SET_LEFT, Naar links, 1
	SET_RIGHT, Naar rechts, 2
	SET_AHEAD, Geen bocht, 0, #P BOCHT
	SET_OBTUSE, Flauwe bocht, 1
	SET_NORMAL, Normale bocht, 2
	SET_SHARP, Scherpe bocht, 3
	SET_ACUTE, Haakse bocht, 4
	SET_NOW, Direct, 1, #P START EN STOP
	SET_NEVER, Nooit, 0
<PRIVATE>
	ACTIVE, Actief, 0
	LDIR, Links richting, 7
	LPWM, Links snelheid, 6
	RDIR, Rechts richting, 4
	RPWM, Rechts snelheid, 5
<SETUP>
	pinMode( (int) LDIR, OUTPUT);
	pinMode( (int) RDIR, OUTPUT);
	SET_OBTUSE = OBTUSE;
	SET_NORMAL = NORMAL;
	SET_SHARP = SHARP;
	SET_ACUTE = ACUTE;
	DIRECTION = SET_OFF;
	STEER = SET_STRAIGHT;
	SHARPNESS = 0;
	SPEED = 0;
    analogWrite( (int) LPWM, 0);
    analogWrite( (int) RPWM, 0);
<STEPINIT>
	START = 0;
	STOP = 0;
	ACTIVE = 0;
<FUNCTIONUPDATE>
	if ( (int) START )
		ACTIVE = 1;
	if ( (int) STOP )
		ACTIVE = 0;
<ACTUATORUPDATE>
	if ( (int) ACTIVE ) {
		if ( (int) SPEED > 100 ) { SPEED = 100; }
		if ( (int) SPEED < 0 ) { SPEED = 0; }
		int speed = (int) SPEED * 255 / 100;
		switch ( (int) DIRECTION ) {
			case 1 : // forward
					 digitalWrite( (int) LDIR, LOW);
					 digitalWrite( (int) RDIR, HIGH);
					 break;
			case 2 : // backward
					 digitalWrite( (int) LDIR, HIGH);
					 digitalWrite( (int) RDIR, LOW);
					 break;
			default: break;
		}
		switch ( (int) STEER ) {
			case 1 : // left
					 analogWrite( (int) LPWM, speed * (100 - (int) SHARPNESS) / 100);
					 analogWrite( (int) RPWM, speed);
					 break;
			case 2 : // right
					 analogWrite( (int) LPWM, speed);
					 analogWrite( (int) RPWM, speed * (100 - (int) SHARPNESS) / 100);
					 break;
			default: // straight
					 analogWrite( (int) LPWM, speed);
					 analogWrite( (int) RPWM, speed);
					 break;
		}
	}
	else {
		analogWrite( (int) LPWM, 0);
		analogWrite( (int) RPWM, 0);
	}
<END>

<DEVICE>
	SENSOR, Lijnsensor
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Lijnsensor
<ICON>
	lijnsensor.png
<SIGNALOUT>
	ISLEFT, Links, 0
	ISRIGHT, Rechts, 0
	ISMID, Op lijn, 0
<PRIVATE>
	LEFT, Linker sensor, 10
	RIGHT, Rechter sensor, 9
<SETUP>
	pinMode( (int) LEFT, INPUT);
	pinMode( (int) RIGHT, INPUT);
<SENSORUPDATE>
	bool left = digitalRead( (int) LEFT);
	bool right = digitalRead( (int) RIGHT);
	ISLEFT = ISRIGHT = ISMID = 0;
	if ( left ) {
		if ( right )
			ISMID = 1;
		else
			ISRIGHT = 1;
	}
	else
	if ( right )
		ISLEFT = 1;
<END>

<DEVICE>
	SENSOR, Afstandsensor
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Afstand
<ICON>
	afstandsensor.png
<CALIBRATE>
	CLOSE, Dichtbij (cm), 25
	AWAY, Veraf (cm), 75
<SIGNALOUT>
	DISTANCE, Afstand (cm), 0
	ISCLOSE, Dichtbij, 0, #P
	ISNORMAL, Normaal, 0
	ISAWAY, Veraf, 0
<PRIVATE>
	PIN, Pin A3, 17
	LASTTIME, Laatse meting
<SETUP>
	LASTTIME = (long) millis();
<SENSORUPDATE>
	if ( millis() - (long) LASTTIME > 30 ) {
		int distance;
		LASTTIME = (long) millis();
		pinMode( (int) PIN, OUTPUT);
		digitalWrite( (int) PIN, LOW);
		delayMicroseconds( 2);
		digitalWrite( (int) PIN, HIGH);
		delayMicroseconds( 10);
		digitalWrite( (int) PIN, LOW);
		pinMode( (int) PIN, INPUT);
		distance = pulseIn( (int) PIN, HIGH, 30000) / 58.0;
		if ( distance == 0 || distance > 500 ) distance = 500;
		DISTANCE = distance;
		ISCLOSE = ISNORMAL = ISAWAY = 0;
		if ( distance ) {
			if ( DISTANCE < CLOSE )
				ISCLOSE = 1;
			else
			if ( DISTANCE > AWAY )
				ISAWAY = 1;
			else
				ISNORMAL = 1;
		}
	}
<END>
