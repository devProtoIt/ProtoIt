// Copyright (C) 2018 D. Kruithof
//
// GNU General Public License Usage
// --------------------------------
// This file may be used under the terms of the GNU General Public
// License version 3.0 as published by the Free Software Foundation
// and appearing in the file 'GNU-GPL.txt' included in the packaging
// of this file.  Please review the following information to ensure
// the GNU General Public License version 3.0 requirements will be
// met: http://www.gnu.org/copyleft/gpl.html.

<PLATFORM>
	RASPBERRY
<AUTHOR>
	ProtoIt
<YEAR>
	2018

<DEVICE>
	SENSOR, Dallas Thermometer
<COPYRIGHT>
	2018, ProtoIt
<ICON>
	thermometer.png
<ADDRESS>
	W1ID, Sensornummer
<CALIBRATE>
	COLD, Koud (°C), 15
	WARM, Warm (°C), 35
<SIGNALOUT>
	CELCIUS, Temperatuur (°C), #P Temperatuur
	FAHRENH, Temperatuur (°F)
	KELVIN, Temperatuur (K)
	ISFREEZING, Vorst, #P Klimaat
	ISCOLD, Koud
	ISNORMAL, Normaal
	ISWARM, Warm
<CONSTANT>
	SETOFF, Uit, 0
	SETON, Aan, 1
	SETLO, Laag, 0
	SETHI, Hoog, 1
<INCLUDE>
#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
<ROUTINE>
void getTemperatureSensor()
{
	DIR *dir;
	struct dirent *dirent;
	char dev[16];
	char path[] = "/sys/bus/w1/devices";
	char devPath[128];

	if ( W1ID != "" ) {
		W1ID = String( "/sys/bus/w1/devices/") + W1ID.toString() + String( "/w1_slave");
		return;
	}
	dir = opendir (path);
	if (dir != NULL) {
		while ( (dirent = readdir( dir)) )
			if ( dirent->d_type == DT_LNK && strstr( dirent->d_name, "28-") != NULL ) {
				strcpy( dev, dirent->d_name);
				break;
			}
		closedir (dir);
		W1ID = String( "/sys/bus/w1/devices/") + String( dev) + String( "/w1_slave");
	}
}
double getTemperature()
{
	double tempC = -1000;
	char buf[256];
	char tmpData[6];
	ssize_t numRead;
	W1ID.toString().toCharArray( buf, 255);
	int fd = open( buf, O_RDONLY);
	if ( fd == -1 ) return -1000;
	if ( (numRead = read( fd, buf, 256)) > 0 ) {
		strncpy( tmpData, strstr( buf, "t=") + 2, 5);
		tempC = strtof( tmpData, NULL) / 1000;
	}
	close( fd);
	return tempC;
}
<SETUP>
	getTemperatureSensor();
<SENSORUPDATE>
	CELCIUS = getTemperature();
	KELVIN = ((double) CELCIUS) - 273;
	FAHRENH = ((double) CELCIUS) * 9 / 5 + 32;
	ISCOLD = ISNORMAL = ISWARM = 0;
	ISFREEZING = 0;
	if ( CELCIUS < COLD )
		ISCOLD = 1;
	else
	if ( CELCIUS > WARM )
		ISWARM = 1;
	else
		ISNORMAL = 1;
	ISFREEZING = ((double) CELCIUS < 0);
<END>
