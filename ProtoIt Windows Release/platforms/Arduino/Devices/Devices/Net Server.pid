// Copyright (C) 2018 D. Kruithof
//
// GNU General Public License Usage
// --------------------------------
// This file may be used under the terms of the GNU General Public
// License version 3.0 as published by the Free Software Foundation
// and appearing in the file 'GNU-GPL.txt' included in the packaging
// of this file.  Please review the following information to ensure
// the GNU General Public License version 3.0 requirements will be
// met: http://www.gnu.org/copyleft/gpl.html.

<PLATFORM>
	ARDUINO
<AUTHOR>
	ProtoIt
<YEAR>
	2018

<DEVICE>
	ACTUATOR, Net Server
<ALIAS>
	Net Server
<COPYRIGHT>
	2018, ProtoIt
<ICON>
	netserver.png
<SIGNALIN>
	TITLE, Titel
	HEADERA, Kopje A
	SIGNALA, Signaal A
	HEADERB, Kopje B
	SIGNALB, Signaal B
	HEADERC, Kopje C
	SIGNALC, Signaal C
	HEADERD, Kopje D
	SIGNALD, Signaal D
	MODUS, Manier, #P Verzending, #E
<SIGNALOUT>
	IPADDR, IP-adres
<CONSTANT>
	SET_HTML, Als html, 0
	SET_XML, Als xml, 1
<CALIBRATE>
	IP, IP-adres, 192.168.1.200
	GW, Gateway, 192.168.1.1
	MAC, Mac-adres, 116 105 105 45 48 49
	CS, CS-pin, 53
<INCLUDE>
#include <EtherCard.h>
<LIBRARY>
EtherCard
<GLOBAL>
BufferFiller bfill;
<ROUTINE>
void fillHtml()
{
	String html = String( "<html><head><title>ProtoIt Net Monitor</title></head><body><h3>") + TITLE.toString() + String( "</h3>");
	html += String( "<table><tr><td with=120><b>Data</b></td><td><b>Waarde</b></td></tr>");
	if ( HEADERA.toString() != "" )
		html += String( "<tr><td>") + HEADERA.toString() + String( "</td><td>") + SIGNALA.toString() + String( "</td></tr>");
	if ( HEADERB.toString() != "" )
		html += String( "<tr><td>") + HEADERB.toString() + String( "</td><td>") + SIGNALB.toString() + String( "</td></tr>");
	if ( HEADERC.toString() != "" )
		html += String( "<tr><td>") + HEADERC.toString() + String( "</td><td>") + SIGNALC.toString() + String( "</td></tr>");
	if ( HEADERD.toString() != "" )
		html += String( "<tr><td>") + HEADERD.toString() + String( "</td><td>") + SIGNALD.toString() + String( "</td></tr>");
	html += String( "</table></body></html>");
	char buff[BUFFERSIZE];
	html.toCharArray( buff, BUFFERSIZE);
	bfill.emit_p( PSTR( "$S"), buff);
}
void fillXml()
{
}
<SETUP>
	int ix;
	String str;
	uint8_t ether_mac[] = { 0x74, 0x69, 0x69, 0x2D, 0x30, 0x31};
	uint8_t ether_ip[] = { 192, 168, 1, 200};
	uint8_t ether_gw[] = { 192, 168, 1, 1};
	str = MAC.toString();
	if ( str != "" ) {
		ix = 0;
		for ( int i = 0; i < 6; i++ ) {
			str = str.substring( ix);
			str.trim();
			ether_mac[i] = str.toInt();
			ix = str.indexOf( " ") + 1;
		}
	}
	ether.begin( ether_ip, CS);
	if ( IP.toString() == "" )
		ether.dhcpSetup();
	else {
		str = IP.toString();
		ix = 0;
		for ( int i = 0; i < 4; i++ ) {
			str = str.substring( ix);
			str.trim();
			ether_ip[i] = str.toInt();
			ix = str.indexOf( ".") + 1;
		}
		str = GW.toString();
		ix = 0;
		for ( int i = 0; i < 4; i++ ) {
			str = str.substring( ix);
			str.trim();
			ether_gw[i] = str.toInt();
			ix = str.indexOf( ".") + 1;
		}
		ether.staticSetup( ether_ip, ether_gw);
	}
	str = "";
	for ( int i = 0; i < 4; i++ )
		str += String( ether.myip[i] + ".");
	str = str.substring( 0, str.length() - 1);
	IPADDR = str;
<ACTUATORUPDATE>
  if ( ether.packetLoop( ether.packetReceive()) ) {
    bfill = ether.tcpOffset();
    fillHtml();
    ether.httpServerReply( bfill.position());
  }
<END>
