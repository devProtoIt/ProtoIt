// Copyright (C) 2018 D. Kruithof
//
// GNU General Public License Usage
// --------------------------------
// This file may be used under the terms of the GNU General Public
// License version 3.0 as published by the Free Software Foundation
// and appearing in the file 'GNU-GPL.txt' included in the packaging
// of this file.  Please review the following information to ensure
// the GNU General Public License version 3.0 requirements will be
// met: http://www.gnu.org/copyleft/gpl.html.

<PLATFORM>
	INFENTO
<AUTHOR>
	ProtoIt
<YEAR>
	2018

<DEVICE>
	ACTUATOR, Buggy
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Buggy
<COPYRIGHT>
	2018, ProtoIt
<ALIAS>
	Buggy
<ICON>
	buggy.png
<CALIBRATE>
	OBTUSE, Flauwe bocht (%), 33
	NORMAL, Normale bocht (%), 50
	SHARP, Scherpe bocht (%), 100
<SIGNALIN>
	DIRECTION, Richting, #P Besturing
	PAUSE, Omkeertijd (msec), 100, #E
	STEER, Stuur
	WAIT, Wacht op stuur?, > Nee, #E
	SHARPNESS, Bocht (%)
	SPEED, Snelheid (%)
	DISTANCE, Afstand (cm), #P Afstand of tijd, #E
	RUNTIME, Tijd (sec), #E
	START, Start wanneer?, > Direct, #P Start en stop, #E
	STOP, Stop wanneer?, > Nooit, #E
<SIGNALOUT>
	READY, Klaar, 0
<CONSTANT>
	SET_FORWARD, Vooruit, 0, #P RICHTING
	SET_BACKWARD, Achteruit, 1
	SET_YES, Ja, 1
	SET_NO, Nee, 0
	SET_STRAIGHT, Rechtdoor, 0, #P STUUR
	SET_LEFT, Naar links, 1
	SET_RIGHT, Naar rechts, 2
	SET_AHEAD, Geen bocht, 0, #P BOCHT
	SET_OBTUSE, Flauwe bocht, 1
	SET_NORMAL, Normale bocht, 2
	SET_SHARP, Scherpe bocht, 3
	SET_OFF, Stop, 0, #P SNELHEID
	SET_MAX, Maximum, 100
	SET_NOW, Direct, 1, #P START EN STOP
	SET_NEVER, Nooit, 0
<GLOBAL>
	InfentoMotor ed( CONST_EDRIVE);
	InfentoLinAct la( CONST_LINACT1);
<PRIVATE>
	ACTIVE, Actief, 0
	OLDSPEED, Vorige snelheid, 0
	OLDDIR, Vorige richting, 0
	OLDSTEER, Vorige bocht, 0
<ROUTINE>
int steerBuggy()
{
	int steer = 50;
	if ( (int) DIRECTION ) {
		if ( STEER == SET_LEFT )
			steer += (int) SHARPNESS;
		else
		if ( STEER == SET_RIGHT )
			steer -= (int) SHARPNESS;
	}
	else {
		if ( STEER == SET_LEFT )
			steer -= (int) SHARPNESS;
		else
		if ( STEER == SET_RIGHT )
			steer += (int) SHARPNESS;
	}
	return steer;
}
<SETUP>
	la.connect( 9);
	la.calibrate( 100);
	la.setStartupPower( 100); // maximum
	ed.connect( 9);
	ed.calibrate( 15, 0);
	ed.setVelocityUnit( UNIT_MPS);
	ed.setDistanceUnit( UNIT_CM);
	ed.setTimeUnit( UNIT_SEC);
	ed.setDirection( CONST_FORWARD);
	ed.setAcceleration( 10);
	ed.setVelocity( 0); // maximum
	ed.setStartupPower( 0);
	ed.attachRotary( 60, 335);
	SET_OBTUSE = (int) OBTUSE / 2;
	SET_NORMAL = (int) NORMAL / 2;
	SET_SHARP = (int) SHARP / 2;
	DIRECTION = SET_FORWARD;
	STEER = SET_STRAIGHT;
	SHARPNESS = 0;
	SPEED = 0;
	OLDDIR = (int) CONST_FORWARD;
	OLDSPEED = 0;
	OLDSTEER = la.position();
<STEPINIT>
	START = 0;
	STOP = 0;
	ACTIVE = 0;
	READY = 0;
	SET_NOW = 1; // gets reset by the first pass through the step
	if ( (int) WAIT )
		la.moveTo( steerBuggy());
		// be sure to have an initial signal if the la is in the OLDSTEER position
<SENSORUPDATE>
	if ( ed.signal() )
		READY = 1;
<FUNCTIONUPDATE>
    if ( (int) START ) {
        ACTIVE = 1;
		READY = 0;
	}
    if ( (int) STOP ) {
		ed.off();
		ed.waitSignal();
        ACTIVE = 0;
		STOP = 0;
		OLDSPEED = 0;
    }
<ACTUATORUPDATE>
	if ( (int) ACTIVE ) {
		if ( OLDDIR != DIRECTION ) {
			if ( (int) DIRECTION )
				ed.setDirection( CONST_REVERSE);
			else
				ed.setDirection( CONST_FORWARD);
			InfentoPort::wait( (int) PAUSE); // needed to let the motor run out (edrive internal)
			OLDSPEED = 0;
			OLDDIR = DIRECTION;
		}
		int steer = steerBuggy();
		if ( (int) OLDSTEER != steer ) {
			OLDSTEER = steer;
			la.moveTo( steer);
		}
		if ( !((int) WAIT) || la.signal() )
		{
			if ( (int) SPEED > 100 ) SPEED = 100;
			if ( (int) SPEED < 0 ) SPEED = 0;
			if ( (int) DISTANCE > 0 ) {
				ed.move( (int) DISTANCE * 10, (int) SPEED);
				ACTIVE = 0;
			}
			else
			if ( (int) RUNTIME > 0 ) {
				ed.run( (int) RUNTIME * 10, (int) SPEED);
				ACTIVE = 0;
			}
			else
			if ( OLDSPEED != SPEED ) {
				ed.on( (int) SPEED);
				OLDSPEED = SPEED;
			}
		}
	}
	SET_NOW = 0; // must be reset after the pass through the step
<END>


<DEVICE>
	SENSOR, Lijnsensor
<ALIAS>
	Lijn
<COPYRIGHT>
	2018, Infento
<ICON>
	lijnvolger.png
<CALIBRATE>
	LINE, Helderheid lijn (%), 10
	GROUND, Helderheid grond (%), 50
	TIMER, Interval (msec), 100
<SIGNALOUT>
	POSITION, Positie
	EXTLEFT, Uiterst links, #P
	FARLEFT, Ver links
	LEFT, Links
	CENTRE, Midden
	RIGHT, Rechts
	FARRIGHT, Ver rechts
	EXTRIGHT, Uiterst rechts
	ONLINE, Op de lijn, #P
	FROMLINE, Naast de lijn
<GLOBAL>
	InfentoLineFollow id;
	InfentoConstant pos;
	long OLDTIME = 0;
<SETUP>
	id.connect( 11);
	id.setLuminance( (int) LINE, (int) GROUND);
<SENSORUPDATE>
	if ( (long) OLDTIME < TIME - (long) TIMER ) {
		OLDTIME = TIME;
		POSITION = 0;
		EXTLEFT = 0;
		FARLEFT = 0;
		LEFT = 0;
		CENTRE = 0;
		RIGHT = 0;
		FARRIGHT = 0;
		EXTRIGHT = 0;
		ONLINE = 1;
		FROMLINE = 0;
		pos = id.position();
		if ( pos & CONST_FARLEFT ) {
			if ( pos & CONST_FARRIGHT ) {
				POSITION = CONST_CENTRE;
				CENTRE = 1;
			}
			else
			if ( pos & CONST_RIGHT ) {
				POSITION = CONST_LEFT;
				LEFT = 1;
			}
			else
			if ( pos & CONST_CENTRE ) {
				POSITION = CONST_LEFT;
				FARLEFT = 1;
			}
			else {
				POSITION = CONST_FARLEFT;
				EXTLEFT = 1;
			}
		}
		else
		if ( pos & CONST_FARRIGHT ) {
			if ( pos & CONST_LEFT ) {
				POSITION = CONST_RIGHT;
				RIGHT = 1;
			}
			else
			if ( pos & CONST_CENTRE ) {
				POSITION = CONST_RIGHT;
				FARRIGHT = 1;
			}
			else {
				POSITION = CONST_FARRIGHT;
				EXTRIGHT = 1;
			}
		}
		else
		if ( pos & CONST_LEFT ) {
			if ( pos & CONST_RIGHT ) {
				POSITION = CONST_CENTRE;
				CENTRE = 1;
			}
			else {
				POSITION = CONST_LEFT;
				LEFT = 1;
			}
		}
		else
		if ( pos & CONST_RIGHT ) {
			POSITION = CONST_RIGHT;
			RIGHT = 1;
		}
		else
		if ( pos & CONST_CENTRE ) {
			POSITION = CONST_CENTRE;
			CENTRE = 1;
		}
		else {
			ONLINE = 0;
			FROMLINE = 1;
		}
	}
<END>


<DEVICE>
	SENSOR, Ultrasone-sensor
<ALIAS>
	Afstand
<COPYRIGHT>
	2018, Infento
<ICON>
	afstandsensor.png
<CALIBRATE>
	CLOSE, Dichtbij (cm), 50
	AWAY, Veraf (cm), 100
	RANGE, Grensbreedte (mm), 10
	TIMER, Interval (msec), 100
<SIGNALOUT>
	DISTANCE, Afstand (cm)
	ISCLOSE, Dichtbij, 0, #P
	ISNORMAL, Normaal, 0
	ISAWAY, Veraf, 0
<GLOBAL>
	InfentoDistance id;
	long OLDTIME = 0;
<SETUP>
	id.connect( 11);
	id.setDistanceUnit( UNIT_CM);
	id.setSignalRange( (int) RANGE);
<SENSORUPDATE>
	if ( (long) OLDTIME < TIME - (long) TIMER ) {
		OLDTIME = TIME;
		DISTANCE = (id.distance() + 5) / 10;
		if ( DISTANCE < CLOSE ) {
			ISCLOSE = 1;
			ISNORMAL = 0;
			ISAWAY = 0;
		}
		else
		if ( DISTANCE > AWAY ) {
			ISCLOSE = 0;
			ISNORMAL = 0;
			ISAWAY = 1;
		}
		else {
			ISCLOSE = 0;
			ISNORMAL = 1;
			ISAWAY = 0;
		}
	}
<END>

<DEVICE>
	SENSOR, PIR-sensor
<ALIAS>
	Beweging
<COPYRIGHT>
	2018, Infento
<ICON>
	bewegingsensor.png
<SIGNALOUT>
	AHEAD, Ziet obstakel, #P
	CLEAR, Geen obstakel
<GLOBAL>
	InfentoMotion id;
<ROUTINE>
void setMotion()
{
	if ( id.objectAhead() ) {
		AHEAD = 1;
		CLEAR = 0;
		id.signalObjectAhead( CONST_RELEASED);
	}
	else {
		AHEAD = 0;
		CLEAR = 1;
		id.signalObjectAhead();
	}
}
<SETUP>
	id.connect( 11);
<STEPINIT>
	setMotion();
<SENSORUPDATE>
	if ( id.signal() )
		setMotion();
<END>

<DEVICE>
	SENSOR, Knop
<ALIAS>
	Stootband
<COPYRIGHT>
	2018, Infento
<ICON>
	knoppen.png
<SIGNALOUT>
	CLOSED, Wel ingedrukt
	OPEN, Niet ingedrukt
<GLOBAL>
	InfentoSwitchPack id;
<SETUP>
	id.connect( 12);
	id.setResponse( CONST_ONCLOSE);
<STEPINIT>
	CLOSED = 0;
	OPEN = 1;
	id.signalPosition( CONST_SWITCH_7);
<SENSORUPDATE>
	if ( id.signal() ) {
		CLOSED = 1;
		OPEN = 0;
	}
<END>
