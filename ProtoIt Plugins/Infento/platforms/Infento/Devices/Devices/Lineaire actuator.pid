// Copyright (C) 2018 D. Kruithof
//
// GNU General Public License Usage
// --------------------------------
// This file may be used under the terms of the GNU General Public
// License version 3.0 as published by the Free Software Foundation
// and appearing in the file 'GNU-GPL.txt' included in the packaging
// of this file.  Please review the following information to ensure
// the GNU General Public License version 3.0 requirements will be
// met: http://www.gnu.org/copyleft/gpl.html.

<PLATFORM>
	INFENTO
<AUTHOR>
	ProtoIt
<YEAR>
	2018

<DEVICE>
	ACTUATOR, Lineaire actuator
<COPYRIGHT>
	2018, ProtoIt
<ICON>
	lineaire actuator.png
<PORT>
	ADDRESS, Adres, 21
	PORT, Motorpoort, 1
<CALIBRATE>
	SHAFTLENGTH, Lengte (mm), 100
    RUNUP, Aanloop (mm), 10
    STARTUP, Opstart voluit (J/N), Ja
	TIMER, Interval pos (msec), 100
<SIGNALIN>
	NEXTPOS, Naar positie (mm), #P Positie en snelheid
	SPEED, Snelheid (%)
	START, Start wanneer?, > Direct, #P Start en stop, #E
	STOP, Stop wanneer?, > Nooit, #E
<SIGNALOUT>
	CURRENTPOS, Positie (mm)
	READY, Klaar
<CONSTANT>
	SET_OUT, Volledig uit, -1, #P POSITIE
	SET_IN, Volledig in, 0
	SET_OFF, Stop, 0, #P SNELHEID
	SET_MAX, Maximum, 100
	SET_NOW, Direct, 1, #P START EN STOP
	SET_NEVER, Nooit, 0
<GLOBAL>
	InfentoLinAct id( (InfentoDefinition) (int) PORT);
	long OLDTIME = 0;
<PRIVATE>
	ACTIVE, Actief, 0
    OLDPOS, Van positie, -2
	FUNC, Functie, 0
<SETUP>
	SET_OUT = SHAFTLENGTH;
	id.connect( (int) ADDRESS);
	id.setPositionUnit( UNIT_CM);
	if ( (int) RUNUP )
		id.calibrate( (int) SHAFTLENGTH, (int) RUNUP, (int) Variant(SHAFTLENGTH - RUNUP));
	else
		id.calibrate( (int) SHAFTLENGTH);
	if ( STARTUP.toString().startsWith( "J") || STARTUP.toString().startsWith( "j") )
		id.setStartupPower( 100);
<STEPINIT>
	START = 0;
	STOP = 0;
	ACTIVE = 0;
	READY = 0;
    OLDPOS = -2;
	FUNC = 0;
<SENSORUPDATE>
	if ( (long) OLDTIME < TIME - (long) TIMER ) {
		OLDTIME = TIME;
		CURRENTPOS = id.position();
	}
	if ( id.signal() )
		READY = 1;
<FUNCTIONUPDATE>
    if ( ((int) START) && !((int) FUNC) ) {
		ACTIVE = 1;
		READY = 0;
	}
    if ( (int) STOP && (int) ACTIVE ) {
        id.off();
        id.waitSignal();
        ACTIVE = 0;
		FUNC = 0;
    }
<ACTUATORUPDATE>
	if ( ((int) ACTIVE) && (NEXTPOS != OLDPOS) ) {
        if ( (int) SPEED > 100 ) SPEED = 100;
        if ( (int) SPEED < 0 ) SPEED = 0;
		if ( NEXTPOS == SET_IN ) {
			id.moveIn( (int) CONST_FULL, (int) SPEED);
			FUNC = 0;
		}
		else
		if ( NEXTPOS == SET_OUT ) {
			id.moveOut( (int) CONST_FULL, (int) SPEED);
			FUNC = 0;
		}
		else {
			if ( NEXTPOS > SHAFTLENGTH ) NEXTPOS = SHAFTLENGTH;
			if ( (int) NEXTPOS < 0 ) NEXTPOS = 0;
			id.moveTo( (int) NEXTPOS, (int) SPEED);
			FUNC = 1;
			ACTIVE = 0;
		}
		OLDPOS = NEXTPOS;
	}
<END>
