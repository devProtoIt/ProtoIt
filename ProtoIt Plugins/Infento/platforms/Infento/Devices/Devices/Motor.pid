// Copyright (C) 2018 D. Kruithof
//
// GNU General Public License Usage
// --------------------------------
// This file may be used under the terms of the GNU General Public
// License version 3.0 as published by the Free Software Foundation
// and appearing in the file 'GNU-GPL.txt' included in the packaging
// of this file.  Please review the following information to ensure
// the GNU General Public License version 3.0 requirements will be
// met: http://www.gnu.org/copyleft/gpl.html.

<PLATFORM>
	INFENTO
<AUTHOR>
	ProtoIt
<YEAR>
	2018

<DEVICE>
	ACTUATOR, Motor
<COPYRIGHT>
	2018, ProtoIt
<ICON>
	motor.png
<PORT>
	ADDRESS, Adres, 21
	PORT, Motorpoort, 3
<CALIBRATE>
	MAXVELOCITY, Max. snelh. (0.1 m/s), 15
	ACCELERATION, Versnelling (0.1 m/s²), 10
    STARTUP, Opstart (%), 0
	ROTARY, Meet rotatie (Ja/Nee), Nee
	TICKS, Omwenteling (tikken), 60
	DIAMETER, Wieldiameter (mm), 350
<SIGNALIN>
	DIRECTION, Richting, #P Richting en snelheid
	PAUSE, Omkeertijd (msec), 100, #E
	SPEED, Snelheid (%)
	DISTANCE, Afstand (cm), #P Afstand of tijd, #E
	RUNTIME, Tijd (sec), #E
	START, Start wanneer?, > Direct, #P Start en stop, #E
	STOP, Stop wanneer?, > Nooit, #E
<SIGNALOUT>
	READY, Klaar, 0
<CONSTANT>
	SET_FORWARD, Vooruit, 0, #P RICHTING
	SET_BACKWARD, Achteruit, 1
	SET_OFF, Stop, 0, #P SNELHEID
	SET_MAX, Maximum, 100
	SET_NOW, Direct, 1, #P START EN STOP
	SET_NEVER, Nooit, 0
<GLOBAL>
	InfentoMotor id( (InfentoDefinition) (int) PORT);
<PRIVATE>
	ACTIVE, Actief, 0
	OLDSPEED, Vorige snelheid, 0
	OLDDIR, Vorige richting, 0
<SETUP>
	id.connect( (int) ADDRESS);
	id.calibrate( (int) MAXVELOCITY, 0);
	id.setVelocityUnit( UNIT_MPS);
	id.setDistanceUnit( UNIT_CM);
	id.setTimeUnit( UNIT_SEC);
	id.setDirection( CONST_FORWARD);
	id.setAcceleration( (int) ACCELERATION);
	id.setVelocity( 0);
	id.setStartupPower( (int) STARTUP);
	OLDDIR = (int) CONST_FORWARD;
	OLDSPEED = 0;
	String rot = ROTARY.toString();
	rot.trim();
	rot = rot.substring( 0, 1);
	rot.toUpperCase();
	if ( rot == "J" )
		id.attachRotary( (int) TICKS, (int) DIAMETER);
<STEPINIT>
	START = 0;
	STOP = 0;
	ACTIVE = 0;
	READY = 0;
	SET_NOW = 1; // gets reset by the first pass through the step
<SENSORUPDATE>
	if ( id.signal() )
		READY = 1;
<FUNCTIONUPDATE>
    if ( (int) START ) {
        ACTIVE = 1;
		READY = 0;
	}
    if ( (int) STOP ) {
		id.off();
		id.waitSignal();
        ACTIVE = 0;
		STOP = 0;
		OLDSPEED = 0;
    }
<ACTUATORUPDATE>
	if ( (int) ACTIVE ) {
		if ( OLDDIR != DIRECTION ) {
			if ( (int) DIRECTION )
				id.setDirection( CONST_REVERSE);
			else
				id.setDirection( CONST_FORWARD);
			InfentoPort::wait( (int) PAUSE); // needed to let the motor run out (edrive internal)
			OLDSPEED = 0;
			OLDDIR = DIRECTION;
		}
        if ( (int) SPEED > 100 ) SPEED = 100;
        if ( (int) SPEED < 0 ) SPEED = 0;
		if ( (int) DISTANCE > 0 ) {
			id.move( (int) DISTANCE * 10, (int) SPEED);
			ACTIVE = 0;
		}
		else
		if ( (int) RUNTIME > 0 ) {
			id.run( (int) RUNTIME * 10, (int) SPEED);
			ACTIVE = 0;
		}
		else
		if ( OLDSPEED != SPEED ) {
			id.on( (int) SPEED);
			OLDSPEED = SPEED;
		}
	}
	SET_NOW = 0; // must be reset after the pass through the step
<END>
